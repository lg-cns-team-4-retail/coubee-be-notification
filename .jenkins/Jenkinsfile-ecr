#!/usr/bin/env groovy
def APP_NAME
def APP_VERSION
def DOCKER_IMAGE_NAME
def PROD_BUILD = false

pipeline {
    agent {
        node {
            label 'master'
        }
    }

    parameters {
        gitParameter branch: '',
                branchFilter: '.*',
                defaultValue: 'origin/main',
                description: '',
                listSize: '0',
                name: 'TAG',
                quickFilterEnabled: false,
                selectedValue: 'DEFAULT',
                sortMode: 'DESCENDING_SMART',
                tagFilter: '*',
                type: 'PT_BRANCH_TAG'

        booleanParam defaultValue: false, description: '', name: 'RELEASE'
    }

    environment {
        GIT_URL = "https://github.com/lg-cns-team-4-retail/coubee-be-notification.git"
        GITHUB_CREDENTIAL = "github-token"
        ARTIFACTS = "build/libs/**"
        DOCKER_REGISTRY = "moonjiuk"

        // ECR 관련 환경 변수
        AWS_REGION = "ap-northeast-2"
        AWS_ACCOUNT_ID = "310095858382"
        AWS_CREDENTIAL_ID = "aws-token"
        ECR_REPO_NAME = "310095858382.dkr.ecr.ap-northeast-2.amazonaws.com/coubee-be-notification"
    }

    options {
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: "30", artifactNumToKeepStr: "30"))
        timeout(time: 120, unit: 'MINUTES')
    }

    tools {
        gradle 'Gradle 8.14.2'
        jdk 'OpenJDK 17'
        dockerTool 'Docker'
    }

    stages {
        stage('Set Version') {
            steps {
                script {
                    APP_NAME = sh (
                            script: "gradle -q getAppName",
                            returnStdout: true
                    ).trim()
                    APP_VERSION = sh (
                            script: "gradle -q getAppVersion",
                            returnStdout: true
                    ).trim()

                    DOCKER_IMAGE_NAME = "${DOCKER_REGISTRY}/${APP_NAME}:${APP_VERSION}"

                    sh "echo IMAGE_NAME is ${APP_NAME}"
                    sh "echo IMAGE_VERSION is ${APP_VERSION}"
                    sh "echo DOCKER_IMAGE_NAME is ${DOCKER_IMAGE_NAME}"

                    sh "echo TAG is ${params.TAG}"
                    if( params.TAG.startsWith('origin') == false && params.TAG.endsWith('/main') == false ) {
                        if( params.RELEASE == true ) {
                            APP_VERSION += '-RELEASE'
                            PROD_BUILD = true
                        } else {
                            APP_VERSION += '-TAG'
                        }
                    }
                }
            }
        }

        stage('Build & Test Application') {
            steps {
                sh "gradle clean build"
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // 기존 이미지 완전 삭제
                    sh "docker rmi ${DOCKER_IMAGE_NAME} || true"
                    sh "docker system prune -f"

                    sh """
                            # 기존 buildx 인스턴스 제거
                            docker buildx rm multiarch-builder || true
                
                            # 새로운 buildx 인스턴스 생성
                            docker buildx create --name multiarch-builder --driver docker-container --use
                
                            # Linux base 이미지 강제 pull
                            docker pull --platform linux/amd64 amazoncorretto:17

                            # buildx로 빌드 (push 없이)
                            docker buildx build --platform linux/amd64 \\
                                -f .docker/Dockerfile \\
                                -t ${DOCKER_IMAGE_NAME} \\
                                --output type=docker .
                        """

                    // 플랫폼 재확인
                    sh "docker inspect ${DOCKER_IMAGE_NAME} --format='{{.Os}}/{{.Architecture}}'"
                }
            }
        }

        stage('Test Docker Image') {
            steps {
                script {
                    sh """
                echo "=== Testing built image ==="
                docker run --rm ${DOCKER_IMAGE_NAME} file /usr/bin/java
                docker run --rm ${DOCKER_IMAGE_NAME} uname -a  
                docker run --rm ${DOCKER_IMAGE_NAME} java -version
                echo "=== Testing JAR file ==="
                docker run --rm ${DOCKER_IMAGE_NAME} file /app.jar
            """
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // ECR Push
                    def ECR_IMAGE = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${APP_NAME}:${APP_VERSION}"

                    withAWS(region: AWS_REGION, credentials: AWS_CREDENTIAL_ID) {
                        sh """
                          echo "[INFO] Logging in to ECR..."
                          aws ecr get-login-password --region ${AWS_REGION} \\
                            | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com

                          echo "[INFO] Tagging Docker image for ECR..."
                          docker tag ${DOCKER_IMAGE_NAME} ${ECR_IMAGE}

                          echo "[INFO] Pushing Docker image to ECR..."
                          docker push ${ECR_IMAGE}

                          echo "[INFO] Cleaning up local ECR image..."
                          docker rmi ${ECR_IMAGE}
                        """
                    }

                    sh "docker rmi ${DOCKER_IMAGE_NAME}"
                }
            }
        }
    }
}